// Code generated by the Encore v1.49.1 client generator. DO NOT EDIT.

// Disable eslint, jshint, and jslint for this file.
/* eslint-disable */
/* jshint ignore:start */
/*jslint-disable*/

/**
 * BaseURL is the base URL for calling the Encore application's API.
 */
export type BaseURL = string

export const Local: BaseURL = "http://localhost:4000"

/**
 * Environment returns a BaseURL for calling the cloud environment with the given name.
 */
export function Environment(name: string): BaseURL {
    return `https://${name}-supernaturalins-tmi2.encr.app`
}

/**
 * PreviewEnv returns a BaseURL for calling the preview environment with the given PR number.
 */
export function PreviewEnv(pr: number | string): BaseURL {
    return Environment(`pr${pr}`)
}

const BROWSER = typeof globalThis === "object" && ("window" in globalThis);

/**
 * Client is an API client for the supernaturalins-tmi2 Encore application.
 */
export default class Client {
    public readonly academy: academy.ServiceClient
    public readonly admin: admin.ServiceClient
    public readonly church: church.ServiceClient
    public readonly fund: fund.ServiceClient
    public readonly membership: membership.ServiceClient
    public readonly outreach: outreach.ServiceClient
    public readonly partnership: partnership.ServiceClient
    public readonly payment: payment.ServiceClient
    public readonly staff: staff.ServiceClient
    public readonly user: user.ServiceClient
    private readonly options: ClientOptions
    private readonly target: string


    /**
     * Creates a Client for calling the public and authenticated APIs of your Encore application.
     *
     * @param target  The target which the client should be configured to use. See Local and Environment for options.
     * @param options Options for the client
     */
    constructor(target: BaseURL, options?: ClientOptions) {
        this.target = target
        this.options = options ?? {}
        const base = new BaseClient(this.target, this.options)
        this.academy = new academy.ServiceClient(base)
        this.admin = new admin.ServiceClient(base)
        this.church = new church.ServiceClient(base)
        this.fund = new fund.ServiceClient(base)
        this.membership = new membership.ServiceClient(base)
        this.outreach = new outreach.ServiceClient(base)
        this.partnership = new partnership.ServiceClient(base)
        this.payment = new payment.ServiceClient(base)
        this.staff = new staff.ServiceClient(base)
        this.user = new user.ServiceClient(base)
    }

    /**
     * Creates a new Encore client with the given client options set.
     *
     * @param options Client options to set. They are merged with existing options.
     **/
    public with(options: ClientOptions): Client {
        return new Client(this.target, {
            ...this.options,
            ...options,
        })
    }
}

/**
 * ClientOptions allows you to override any default behaviour within the generated Encore client.
 */
export interface ClientOptions {
    /**
     * By default the client will use the inbuilt fetch function for making the API requests.
     * however you can override it with your own implementation here if you want to run custom
     * code on each API request made or response received.
     */
    fetcher?: Fetcher

    /** Default RequestInit to be used for the client */
    requestInit?: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }

    /**
     * Allows you to set the authentication data to be used for each
     * request either by passing in a static object or by passing in
     * a function which returns a new object for each request.
     */
    auth?: auth.AuthParams | AuthDataGenerator
}

export namespace academy {
    export interface Certificate {
        id: number
        courseId: number
        userId: string
        issuedAt: string
        certificateCode: string
        recipientName?: string | null
        certificateUrl?: string | null
    }

    export interface Certificate {
        id: number
        courseId: number
        courseTitle: string
        userId: string
        issuedAt: string
        certificateCode: string
        recipientName?: string | null
        certificateUrl?: string | null
    }

    export interface CompleteCourseResponse {
        success: boolean
        certificate: Certificate
    }

    export interface Course {
        id: number
        title: string
        description: string
        category: string
        thumbnailUrl?: string
        videoUrl?: string
        pdfUrl?: string
        durationMinutes?: number
        isPublished: boolean
        isPremium: boolean
        createdAt: string
    }

    export interface Course {
        id: number
        title: string
        description: string
        category: string
        thumbnailUrl?: string
        videoUrl?: string
        pdfUrl?: string
        durationMinutes?: number
        isPublished: boolean
        isPremium: boolean
        createdAt: string
    }

    export interface CourseModule {
        title: string
        contentUrl?: string
    }

    export interface CourseModule {
        id: number
        title: string
        contentUrl?: string
        orderIndex: number
    }

    export interface CourseProgress {
        courseId: number
        progressPercentage: number
        completedAt?: string | null
        lastAccessed?: string | null
    }

    export interface CourseWithModules {
        id: number
        title: string
        description: string
        category: string
        thumbnailUrl?: string
        durationMinutes?: number
        isPublished: boolean
        isPremium: boolean
        requiresQuiz: boolean
        passingScore: number
        createdAt: string
        modules: CourseModule[]
        quizQuestions: QuizQuestion[]
    }

    export interface CreateCourseParams {
        title: string
        description: string
        category: string
        thumbnailUrl?: string
        videoUrl?: string
        pdfUrl?: string
        durationMinutes?: number
        isPublished: boolean
        isPremium: boolean
    }

    export interface CreateCourseWithModulesParams {
        title: string
        description: string
        category: string
        thumbnailUrl?: string
        durationMinutes?: number
        isPublished: boolean
        isPremium: boolean
        requiresQuiz: boolean
        passingScore?: number
        modules: CourseModule[]
        quizQuestions: QuizQuestion[]
    }

    export interface CreateCourseWithModulesResponse {
        courseId: number
        modulesCreated: number
        questionsCreated: number
        success: boolean
    }

    export interface DeleteCourseResponse {
        success: boolean
    }

    export interface GetProgressResponse {
        progress: CourseProgress[]
    }

    export interface ListAllCoursesResponse {
        courses: Course[]
    }

    export interface ListCertificatesResponse {
        certificates: Certificate[]
    }

    export interface ListCoursesResponse {
        courses: Course[]
    }

    export interface QuizAnswer {
        questionId: number
        selectedAnswer: "A" | "B" | "C" | "D"
    }

    export interface QuizQuestion {
        question: string
        optionA: string
        optionB: string
        optionC: string
        optionD: string
        correctAnswer: "A" | "B" | "C" | "D"
    }

    export interface QuizQuestion {
        id: number
        question: string
        optionA: string
        optionB: string
        optionC: string
        optionD: string
        correctAnswer: string
        orderIndex: number
    }

    export interface SubmitQuizParams {
        answers: QuizAnswer[]
    }

    export interface SubmitQuizResponse {
        score: number
        totalQuestions: number
        passed: boolean
        passingScore: number
        certificateIssued: boolean
    }

    export interface UpdateCourseParams {
        title: string
        description: string
        category: string
        thumbnailUrl?: string
        videoUrl?: string
        pdfUrl?: string
        durationMinutes?: number
        isPublished: boolean
        isPremium: boolean
    }

    export interface UpdateProgressParams {
        progressPercentage: number
    }

    export interface UpdateProgressResponse {
        success: boolean
        progressPercentage: number
        completedAt?: string | null
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.completeCourse = this.completeCourse.bind(this)
            this.createCourse = this.createCourse.bind(this)
            this.createCourseWithModules = this.createCourseWithModules.bind(this)
            this.deleteCourse = this.deleteCourse.bind(this)
            this.getCourse = this.getCourse.bind(this)
            this.getCourseWithModules = this.getCourseWithModules.bind(this)
            this.getProgress = this.getProgress.bind(this)
            this.listAllCourses = this.listAllCourses.bind(this)
            this.listCertificates = this.listCertificates.bind(this)
            this.listCourses = this.listCourses.bind(this)
            this.submitQuiz = this.submitQuiz.bind(this)
            this.updateCourse = this.updateCourse.bind(this)
            this.updateProgress = this.updateProgress.bind(this)
        }

        /**
         * Marks a course as complete for a user and issues a certificate with their full name.
         */
        public async completeCourse(courseId: number): Promise<CompleteCourseResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/academy/courses/${encodeURIComponent(courseId)}/complete`)
            return await resp.json() as CompleteCourseResponse
        }

        /**
         * Creates a new course.
         */
        public async createCourse(params: CreateCourseParams): Promise<Course> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/admin/academy/courses`, JSON.stringify(params))
            return await resp.json() as Course
        }

        /**
         * Creates a new course with modules and quiz questions.
         */
        public async createCourseWithModules(params: CreateCourseWithModulesParams): Promise<CreateCourseWithModulesResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/admin/academy/courses/full`, JSON.stringify(params))
            return await resp.json() as CreateCourseWithModulesResponse
        }

        /**
         * Deletes a course.
         */
        public async deleteCourse(id: number): Promise<DeleteCourseResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("DELETE", `/admin/academy/courses/${encodeURIComponent(id)}`)
            return await resp.json() as DeleteCourseResponse
        }

        /**
         * Gets a specific course by ID
         */
        public async getCourse(id: number): Promise<Course> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/academy/courses/${encodeURIComponent(id)}`)
            return await resp.json() as Course
        }

        /**
         * Gets a course with all its modules and quiz questions.
         */
        public async getCourseWithModules(id: number): Promise<CourseWithModules> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/admin/academy/courses/${encodeURIComponent(id)}/full`)
            return await resp.json() as CourseWithModules
        }

        /**
         * Gets the progress for all published courses for the authenticated user.
         */
        public async getProgress(): Promise<GetProgressResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/academy/progress`)
            return await resp.json() as GetProgressResponse
        }

        /**
         * Lists all courses, including unpublished ones, for admin purposes.
         */
        public async listAllCourses(): Promise<ListAllCoursesResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/admin/academy/courses`)
            return await resp.json() as ListAllCoursesResponse
        }

        /**
         * Lists all certificates for the authenticated user.
         */
        public async listCertificates(): Promise<ListCertificatesResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/academy/certificates`)
            return await resp.json() as ListCertificatesResponse
        }

        /**
         * Lists all published courses
         */
        public async listCourses(): Promise<ListCoursesResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/academy/courses`)
            return await resp.json() as ListCoursesResponse
        }

        /**
         * Submits quiz answers and calculates score. Issues named certificate on pass.
         */
        public async submitQuiz(courseId: number, params: SubmitQuizParams): Promise<SubmitQuizResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/academy/courses/${encodeURIComponent(courseId)}/quiz/submit`, JSON.stringify(params))
            return await resp.json() as SubmitQuizResponse
        }

        /**
         * Updates an existing course.
         */
        public async updateCourse(id: number, params: UpdateCourseParams): Promise<Course> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PUT", `/admin/academy/courses/${encodeURIComponent(id)}`, JSON.stringify(params))
            return await resp.json() as Course
        }

        /**
         * Updates the user's progress for a course. If the course is premium, requires an active membership.
         */
        public async updateProgress(courseId: number, params: UpdateProgressParams): Promise<UpdateProgressResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/academy/courses/${encodeURIComponent(courseId)}/progress`, JSON.stringify(params))
            return await resp.json() as UpdateProgressResponse
        }
    }
}

export namespace admin {
    export interface ComplianceCategory {
        id: number
        name: string
        description?: string
        icon?: string
        color?: string
        displayOrder: number
        items: ComplianceItem[]
    }

    export interface ComplianceItem {
        id: number
        categoryId: number
        name: string
        description?: string
        isRequired: boolean
        isCompleted: boolean
        completedAt?: string | null
        completedBy?: string | null
        notes?: string | null
        dueDate?: string | null
        displayOrder: number
    }

    export interface CreateComplianceCategoryParams {
        name: string
        description?: string
        icon?: string
        color?: string
        displayOrder?: number
    }

    export interface CreateComplianceCategoryResponse {
        id: number
        success: boolean
    }

    export interface CreateComplianceItemParams {
        categoryId: number
        name: string
        description?: string
        isRequired?: boolean
        dueDate?: string
        displayOrder?: number
    }

    export interface CreateComplianceItemResponse {
        id: number
        success: boolean
    }

    export interface GetGuideResponse {
        title: string
        content: string
        updatedAt: string
    }

    export interface GetTermsResponse {
        content: string
        updatedAt: string
    }

    export interface GuideInfo {
        key: string
        title: string
        category: string
    }

    export interface ListComplianceResponse {
        categories: ComplianceCategory[]
    }

    export interface ListGuidesResponse {
        guides: GuideInfo[]
    }

    export interface UpdateComplianceCategoryParams {
        name?: string
        description?: string
        icon?: string
        color?: string
        displayOrder?: number
    }

    export interface UpdateComplianceCategoryResponse {
        success: boolean
    }

    export interface UpdateComplianceItemDetailsParams {
        name?: string
        description?: string
        isRequired?: boolean
        dueDate?: string | null
        displayOrder?: number
    }

    export interface UpdateComplianceItemDetailsResponse {
        success: boolean
    }

    export interface UpdateComplianceItemParams {
        isCompleted: boolean
        completedBy?: string
        notes?: string
    }

    export interface UpdateComplianceItemResponse {
        success: boolean
        item: {
            id: number
            isCompleted: boolean
            completedAt?: string | null
            completedBy?: string | null
            notes?: string | null
        }
    }

    export interface UpdateTermsParams {
        content: string
    }

    export interface UpdateTermsResponse {
        success: boolean
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createComplianceCategory = this.createComplianceCategory.bind(this)
            this.createComplianceItem = this.createComplianceItem.bind(this)
            this.getGuide = this.getGuide.bind(this)
            this.getTerms = this.getTerms.bind(this)
            this.listCompliance = this.listCompliance.bind(this)
            this.listGuides = this.listGuides.bind(this)
            this.updateComplianceCategory = this.updateComplianceCategory.bind(this)
            this.updateComplianceItem = this.updateComplianceItem.bind(this)
            this.updateComplianceItemDetails = this.updateComplianceItemDetails.bind(this)
            this.updateTerms = this.updateTerms.bind(this)
        }

        /**
         * Creates a new compliance category.
         */
        public async createComplianceCategory(params: CreateComplianceCategoryParams): Promise<CreateComplianceCategoryResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/admin/compliance/categories`, JSON.stringify(params))
            return await resp.json() as CreateComplianceCategoryResponse
        }

        /**
         * Creates a new compliance item under a category.
         */
        public async createComplianceItem(params: CreateComplianceItemParams): Promise<CreateComplianceItemResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/admin/compliance/items`, JSON.stringify(params))
            return await resp.json() as CreateComplianceItemResponse
        }

        /**
         * Gets a specific admin guide by its key.
         */
        public async getGuide(guideKey: string): Promise<GetGuideResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/admin/guides/${encodeURIComponent(guideKey)}`)
            return await resp.json() as GetGuideResponse
        }

        /**
         * Gets the content of a legal document
         */
        public async getTerms(documentType: string): Promise<GetTermsResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/admin/terms/${encodeURIComponent(documentType)}`)
            return await resp.json() as GetTermsResponse
        }

        /**
         * Lists all compliance categories with their items
         */
        public async listCompliance(): Promise<ListComplianceResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/admin/compliance`)
            return await resp.json() as ListComplianceResponse
        }

        /**
         * Lists all available admin guides.
         */
        public async listGuides(): Promise<ListGuidesResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/admin/guides`)
            return await resp.json() as ListGuidesResponse
        }

        /**
         * Updates a compliance category's metadata.
         */
        public async updateComplianceCategory(id: number, params: UpdateComplianceCategoryParams): Promise<UpdateComplianceCategoryResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PUT", `/admin/compliance/categories/${encodeURIComponent(id)}`, JSON.stringify(params))
            return await resp.json() as UpdateComplianceCategoryResponse
        }

        /**
         * Updates a compliance item's completion status
         */
        public async updateComplianceItem(id: number, params: UpdateComplianceItemParams): Promise<UpdateComplianceItemResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PUT", `/admin/compliance/items/${encodeURIComponent(id)}`, JSON.stringify(params))
            return await resp.json() as UpdateComplianceItemResponse
        }

        /**
         * Updates compliance item fields (not just completion status).
         */
        public async updateComplianceItemDetails(id: number, params: UpdateComplianceItemDetailsParams): Promise<UpdateComplianceItemDetailsResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PUT", `/admin/compliance/items/${encodeURIComponent(id)}/details`, JSON.stringify(params))
            return await resp.json() as UpdateComplianceItemDetailsResponse
        }

        /**
         * Updates the content of a legal document
         */
        public async updateTerms(documentType: string, params: UpdateTermsParams): Promise<UpdateTermsResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PUT", `/admin/terms/${encodeURIComponent(documentType)}`, JSON.stringify(params))
            return await resp.json() as UpdateTermsResponse
        }
    }
}

export namespace auth {
    export interface AuthParams {
        authorization: string
    }
}

export namespace church {
    export interface CreateEventParams {
        title: string
        description: string
        eventType: string
        startDate: string
        endDate?: string | null
        locationName?: string | null
        virtualLink?: string | null
        isPublished: boolean
    }

    export interface CreateTeachingParams {
        title: string
        slug?: string
        content: string
        excerpt?: string
        category: string
        featuredImageUrl?: string
        authorId?: string
        isPublished: boolean
        publishedAt?: string | null
    }

    export interface DeleteTeachingResponse {
        success: boolean
    }

    export interface Event {
        id: number
        title: string
        description: string
        eventType: string
        startDate: string
        endDate?: string | null
        locationName?: string | null
        virtualLink?: string | null
        isPublished: boolean
    }

    export interface GetTestimonyUploadUrlParams {
        fileExtension?: string
    }

    export interface GetTestimonyUploadUrlResponse {
        url: string
        objectName: string
        publicUrl: string
    }

    export interface ListAllEventsResponse {
        events: Event[]
    }

    export interface ListAllTeachingsResponse {
        teachings: Teaching[]
    }

    export interface ListEventsResponse {
        events: Event[]
    }

    export interface ListPrayerRepliesByUserParams {
        userId: string
    }

    export interface ListPrayerRepliesByUserResponse {
        replies: PrayerReply[]
    }

    export interface ListPrayerRepliesParams {
        email: string
    }

    export interface ListPrayerRepliesResponse {
        replies: PrayerReply[]
    }

    export interface ListPrayerRequestsResponse {
        requests: PrayerRequest[]
    }

    export interface ListTeachingsResponse {
        teachings: Teaching[]
    }

    export interface ListTestimoniesResponse {
        testimonies: Testimony[]
    }

    export interface PrayerReply {
        id: number
        requestId: number
        message: string
        responderName?: string | null
        createdAt: string
    }

    export interface PrayerReply {
        id: number
        requestId: number
        message: string
        responderName?: string | null
        createdAt: string
    }

    export interface PrayerRequest {
        id: number
        name: string
        email?: string
        phone?: string
        request: string
        isUrgent: boolean
        isPrivate: boolean
        status: string
        createdAt: string
        userId?: string
    }

    export interface ReplyPrayerRequestParams {
        responderName?: string
        responderEmail?: string
        message: string
    }

    export interface ReplyPrayerRequestResponse {
        success: boolean
        replyId: number
        updatedStatus: string
    }

    export interface ReviewTestimonyParams {
        approve: boolean
        reviewerId?: string
        notes?: string
    }

    export interface ReviewTestimonyResponse {
        success: boolean
        status: "approved" | "rejected"
        reviewedAt: string
    }

    export interface SubmitPrayerRequestParams {
        name: string
        email?: string
        phone?: string
        request: string
        isUrgent: boolean
        isPrivate: boolean
        userId?: string
    }

    export interface SubmitPrayerRequestResponse {
        id: number
        message: string
    }

    export interface SubmitTestimonyParams {
        contentText?: string
        videoObjectName?: string
        consentPublic: boolean
    }

    export interface SubmitTestimonyResponse {
        id: number
        status: "pending"
        createdAt: string
    }

    export interface Teaching {
        id: number
        title: string
        slug: string
        excerpt?: string
        category: string
        featuredImageUrl?: string
        authorId: string
        publishedAt?: string
        createdAt: string
    }

    export interface Teaching {
        id: number
        title: string
        slug: string
        content: string
        excerpt?: string
        category: string
        featuredImageUrl?: string
        authorId: string
        publishedAt?: string
        createdAt: string
    }

    export interface Testimony {
        id: number
        userId: string
        contentText?: string | null
        videoUrl?: string | null
        consentPublic: boolean
        status: "pending" | "approved" | "rejected"
        createdAt: string
        reviewedAt?: string | null
        reviewerId?: string | null
    }

    export interface UpdateEventParams {
        title: string
        description: string
        eventType: string
        startDate: string
        endDate?: string | null
        locationName?: string | null
        virtualLink?: string | null
        isPublished: boolean
    }

    export interface UpdateTeachingParams {
        title: string
        slug?: string
        content: string
        excerpt?: string
        category: string
        featuredImageUrl?: string
        authorId?: string
        isPublished: boolean
        publishedAt?: string | null
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createEvent = this.createEvent.bind(this)
            this.createTeaching = this.createTeaching.bind(this)
            this.deleteEvent = this.deleteEvent.bind(this)
            this.deleteTeaching = this.deleteTeaching.bind(this)
            this.getTeaching = this.getTeaching.bind(this)
            this.getTestimonyUploadUrl = this.getTestimonyUploadUrl.bind(this)
            this.listAllEvents = this.listAllEvents.bind(this)
            this.listAllTeachings = this.listAllTeachings.bind(this)
            this.listEvents = this.listEvents.bind(this)
            this.listPrayerReplies = this.listPrayerReplies.bind(this)
            this.listPrayerRepliesByUser = this.listPrayerRepliesByUser.bind(this)
            this.listPrayerRequests = this.listPrayerRequests.bind(this)
            this.listTeachings = this.listTeachings.bind(this)
            this.listTestimoniesAdmin = this.listTestimoniesAdmin.bind(this)
            this.replyPrayerRequest = this.replyPrayerRequest.bind(this)
            this.reviewTestimony = this.reviewTestimony.bind(this)
            this.submitPrayerRequest = this.submitPrayerRequest.bind(this)
            this.submitTestimony = this.submitTestimony.bind(this)
            this.updateEvent = this.updateEvent.bind(this)
            this.updateTeaching = this.updateTeaching.bind(this)
        }

        /**
         * Creates a new event (admin).
         */
        public async createEvent(params: CreateEventParams): Promise<Event> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/admin/church/events`, JSON.stringify(params))
            return await resp.json() as Event
        }

        /**
         * Creates a new teaching (admin).
         */
        public async createTeaching(params: CreateTeachingParams): Promise<Teaching> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/admin/church/teachings`, JSON.stringify(params))
            return await resp.json() as Teaching
        }

        /**
         * Deletes an event (admin).
         */
        public async deleteEvent(id: number): Promise<{
    /**
     * Deletes an event (admin).
     */
    success: boolean
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("DELETE", `/admin/church/events/${encodeURIComponent(id)}`)
            return await resp.json() as {
    /**
     * Deletes an event (admin).
     */
    success: boolean
}
        }

        /**
         * Deletes a teaching (admin).
         */
        public async deleteTeaching(id: number): Promise<DeleteTeachingResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("DELETE", `/admin/church/teachings/${encodeURIComponent(id)}`)
            return await resp.json() as DeleteTeachingResponse
        }

        /**
         * Gets a specific teaching by slug
         */
        public async getTeaching(slug: string): Promise<Teaching> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/church/teachings/${encodeURIComponent(slug)}`)
            return await resp.json() as Teaching
        }

        /**
         * Generates a signed upload URL for testimony video uploads.
         */
        public async getTestimonyUploadUrl(params: GetTestimonyUploadUrlParams): Promise<GetTestimonyUploadUrlResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/church/testimonies/upload-url`, JSON.stringify(params))
            return await resp.json() as GetTestimonyUploadUrlResponse
        }

        /**
         * Lists all events, including unpublished ones (admin).
         */
        public async listAllEvents(): Promise<ListAllEventsResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/admin/church/events`)
            return await resp.json() as ListAllEventsResponse
        }

        /**
         * Lists all teachings including drafts (admin).
         */
        public async listAllTeachings(): Promise<ListAllTeachingsResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/admin/church/teachings`)
            return await resp.json() as ListAllTeachingsResponse
        }

        /**
         * Lists all published events
         */
        public async listEvents(): Promise<ListEventsResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/church/events`)
            return await resp.json() as ListEventsResponse
        }

        /**
         * Lists all replies for prayer requests submitted with the given email.
         */
        public async listPrayerReplies(params: ListPrayerRepliesParams): Promise<ListPrayerRepliesResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                email: params.email,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/church/prayer-replies`, undefined, {query})
            return await resp.json() as ListPrayerRepliesResponse
        }

        /**
         * Lists all replies for prayer requests submitted by the given user ID.
         */
        public async listPrayerRepliesByUser(params: ListPrayerRepliesByUserParams): Promise<ListPrayerRepliesByUserResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                userId: params.userId,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/church/prayer-replies-by-user`, undefined, {query})
            return await resp.json() as ListPrayerRepliesByUserResponse
        }

        /**
         * Lists all prayer requests for admin review
         */
        public async listPrayerRequests(): Promise<ListPrayerRequestsResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/church/prayer-requests`)
            return await resp.json() as ListPrayerRequestsResponse
        }

        /**
         * Lists all published teachings
         */
        public async listTeachings(): Promise<ListTeachingsResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/church/teachings`)
            return await resp.json() as ListTeachingsResponse
        }

        /**
         * Lists all testimonies for admin review.
         */
        public async listTestimoniesAdmin(): Promise<ListTestimoniesResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/admin/church/testimonies`)
            return await resp.json() as ListTestimoniesResponse
        }

        /**
         * Adds a reply to a prayer request, updates status to 'answered'.
         */
        public async replyPrayerRequest(id: number, params: ReplyPrayerRequestParams): Promise<ReplyPrayerRequestResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/church/prayer-requests/${encodeURIComponent(id)}/reply`, JSON.stringify(params))
            return await resp.json() as ReplyPrayerRequestResponse
        }

        /**
         * Approves or rejects a testimony (admin).
         */
        public async reviewTestimony(id: number, params: ReviewTestimonyParams): Promise<ReviewTestimonyResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/admin/church/testimonies/${encodeURIComponent(id)}/review`, JSON.stringify(params))
            return await resp.json() as ReviewTestimonyResponse
        }

        /**
         * Submits a prayer request to the church
         */
        public async submitPrayerRequest(params: SubmitPrayerRequestParams): Promise<SubmitPrayerRequestResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/church/prayer-requests`, JSON.stringify(params))
            return await resp.json() as SubmitPrayerRequestResponse
        }

        /**
         * Submits a testimony (pending review). Consent is required.
         */
        public async submitTestimony(params: SubmitTestimonyParams): Promise<SubmitTestimonyResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/church/testimonies`, JSON.stringify(params))
            return await resp.json() as SubmitTestimonyResponse
        }

        /**
         * Updates an existing event (admin).
         */
        public async updateEvent(id: number, params: UpdateEventParams): Promise<Event> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PUT", `/admin/church/events/${encodeURIComponent(id)}`, JSON.stringify(params))
            return await resp.json() as Event
        }

        /**
         * Updates an existing teaching (admin).
         */
        public async updateTeaching(id: number, params: UpdateTeachingParams): Promise<Teaching> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PUT", `/admin/church/teachings/${encodeURIComponent(id)}`, JSON.stringify(params))
            return await resp.json() as Teaching
        }
    }
}

export namespace fund {
    export interface ApproveNeedParams {
        reviewerId?: string
    }

    export interface ApproveNeedResponse {
        success: boolean
        status: string
        approvedAt: string
    }

    export interface CreateDonationParams {
        amount: number
        name?: string
        email?: string
        message?: string
    }

    export interface CreateDonationResponse {
        id: number
        status: string
        createdAt: string
    }

    export interface FinanceSnapshot {
        timestamp: string
        totalAmount: number
        reservedAmount: number
        availableAmount: number
        recentTransactions: {
            id: number
            type: string
            amount: number
            description: string
            createdAt: string
        }[]
    }

    export interface FundBalance {
        totalAmount: number
        reservedAmount: number
        availableAmount: number
        updatedAt: string
    }

    export interface ListNeedsResponse {
        needs: Need[]
    }

    export interface ListTransactionsResponse {
        transactions: Transaction[]
    }

    export interface Need {
        id: number
        title: string
        description: string
        amountNeeded: number
        amountRaised: number
        status: string
        urgency: string
        category: string
        deadline?: string
        createdAt: string
    }

    export interface RejectNeedParams {
        reviewerId?: string
        reason?: string
    }

    export interface RejectNeedResponse {
        success: boolean
        status: string
        rejectedAt: string
    }

    export interface SubmitFundingRequestParams {
        title: string
        description: string
        amountNeeded: number
        category: string
        urgency: string
        deadline?: string
        contactName: string
        contactEmail: string
        contactPhone?: string
        organizationName?: string
        justification: string
    }

    export interface SubmitFundingRequestResponse {
        id: number
        message: string
    }

    export interface Transaction {
        id: number
        type: string
        amount: number
        description: string
        referenceId?: string
        status: string
        createdAt: string
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.approveNeed = this.approveNeed.bind(this)
            this.createDonation = this.createDonation.bind(this)
            this.financeStream = this.financeStream.bind(this)
            this.getBalance = this.getBalance.bind(this)
            this.listNeeds = this.listNeeds.bind(this)
            this.listTransactions = this.listTransactions.bind(this)
            this.rejectNeed = this.rejectNeed.bind(this)
            this.submitFundingRequest = this.submitFundingRequest.bind(this)
        }

        /**
         * Approves a funding need (admin).
         */
        public async approveNeed(id: number, params: ApproveNeedParams): Promise<ApproveNeedResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/fund/needs/${encodeURIComponent(id)}/approve`, JSON.stringify(params))
            return await resp.json() as ApproveNeedResponse
        }

        /**
         * Records a one-time donation (no payment processor integration; records for reconciliation).
         */
        public async createDonation(params: CreateDonationParams): Promise<CreateDonationResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/fund/donations`, JSON.stringify(params))
            return await resp.json() as CreateDonationResponse
        }

        /**
         * Streams finance snapshots periodically for live analysis.
         */
        public async financeStream(): Promise<StreamIn<FinanceSnapshot>> {
            return await this.baseClient.createStreamIn(`/fund/finance/stream`)
        }

        /**
         * Gets the current fund balance
         */
        public async getBalance(): Promise<FundBalance> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/fund/balance`)
            return await resp.json() as FundBalance
        }

        /**
         * Lists all fund needs
         */
        public async listNeeds(): Promise<ListNeedsResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/fund/needs`)
            return await resp.json() as ListNeedsResponse
        }

        /**
         * Lists recent fund transactions
         */
        public async listTransactions(): Promise<ListTransactionsResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/fund/transactions`)
            return await resp.json() as ListTransactionsResponse
        }

        /**
         * Rejects a funding need (admin).
         */
        public async rejectNeed(id: number, params: RejectNeedParams): Promise<RejectNeedResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/fund/needs/${encodeURIComponent(id)}/reject`, JSON.stringify(params))
            return await resp.json() as RejectNeedResponse
        }

        /**
         * Submits a funding request for review
         */
        public async submitFundingRequest(params: SubmitFundingRequestParams): Promise<SubmitFundingRequestResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/fund/requests`, JSON.stringify(params))
            return await resp.json() as SubmitFundingRequestResponse
        }
    }
}

export namespace membership {
    export interface CancelSubscriptionResponse {
        success: boolean
        status: string
    }

    export interface ListPlansResponse {
        plans: Plan[]
    }

    export interface Plan {
        code: string
        name: string
        priceMonthly: number
        features: string[]
    }

    export interface SubscriptionInfo {
        active: boolean
        planCode?: string | null
        planName?: string | null
        renewsAt?: string | null
        status?: string | null
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.cancelSubscription = this.cancelSubscription.bind(this)
            this.getSubscription = this.getSubscription.bind(this)
            this.listPlans = this.listPlans.bind(this)
        }

        /**
         * Cancels the authenticated user's active subscription.
         */
        public async cancelSubscription(): Promise<CancelSubscriptionResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/membership/subscription/cancel`)
            return await resp.json() as CancelSubscriptionResponse
        }

        /**
         * Gets the current subscription for the authenticated user.
         */
        public async getSubscription(): Promise<SubscriptionInfo> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/membership/subscription`)
            return await resp.json() as SubscriptionInfo
        }

        /**
         * Lists all membership plans.
         */
        public async listPlans(): Promise<ListPlansResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/membership/plans`)
            return await resp.json() as ListPlansResponse
        }
    }
}

export namespace outreach {
    export interface AffiliateProfile {
        userId: string
        referralCode: string
        sponsorId?: string | null
        level: number
        totalEarnings: number
        weeklyEarnings: number
        rank: string
        directReferrals: number
        isAffiliate: boolean
    }

    export interface AffiliateProfile {
        userId: string
        referralCode: string
        sponsorId?: string | null
        level: number
        totalEarnings: number
        weeklyEarnings: number
        rank: string
        directReferrals: number
    }

    export interface ApproveWithdrawalResponse {
        success: boolean
        id: number
        status: string
        processedAt: string
    }

    export interface CreateGuideParams {
        title: string
        content: string
        category: string
        order: number
    }

    export interface CreateGuideResponse {
        id: number
        title: string
    }

    export interface DownlineMember {
        id: string
        name: string
        level: number
        status: string
        earnings: number
        children: DownlineMember[]
    }

    export interface GetDownlineResponse {
        downline: DownlineMember[]
    }

    export interface JoinProgramParams {
        sponsorCode?: string
    }

    export interface JoinProgramResponse {
        success: boolean
        referralCode: string
    }

    export interface LeaderboardEntry {
        userId: string
        rank: string
        totalEarnings: number
        weeklyEarnings: number
        level: number
    }

    export interface ListGuidesResponse {
        guides: OutreachGuide[]
    }

    export interface ListLeaderboardParams {
        limit?: number
    }

    export interface ListLeaderboardResponse {
        leaderboard: LeaderboardEntry[]
    }

    export interface ListPayoutsResponse {
        payouts: Payout[]
    }

    export interface ListProfilesResponse {
        profiles: AffiliateProfile[]
    }

    export interface ListWithdrawalsResponse {
        withdrawals: Withdrawal[]
    }

    export interface OutreachGuide {
        id: number
        title: string
        content: string
        category: string
        order: number
        createdAt: string
    }

    export interface OutreachStats {
        weeklyEarnings: number
        totalEarnings: number
        referralCount: number
        outreachImpact: number
        rank: string
        referralCode: string
    }

    export interface Payout {
        id: number
        date: string
        amount: number
        status: string
    }

    export interface SeedNetworkResponse {
        success: boolean
        profilesCreated: number
        referralsCreated: number
        commissionsCreated: number
        withdrawalsCreated: number
    }

    export interface Withdrawal {
        id: number
        affiliateId: string
        amount: number
        walletAddress: string
        status: string
        createdAt: string
        processedAt?: string | null
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.approveWithdrawal = this.approveWithdrawal.bind(this)
            this.createGuide = this.createGuide.bind(this)
            this.getDownline = this.getDownline.bind(this)
            this.getProfile = this.getProfile.bind(this)
            this.getStats = this.getStats.bind(this)
            this.joinProgram = this.joinProgram.bind(this)
            this.listGuides = this.listGuides.bind(this)
            this.listLeaderboard = this.listLeaderboard.bind(this)
            this.listPayouts = this.listPayouts.bind(this)
            this.listProfiles = this.listProfiles.bind(this)
            this.listWithdrawals = this.listWithdrawals.bind(this)
            this.seedNetwork = this.seedNetwork.bind(this)
        }

        /**
         * Approves a withdrawal request.
         */
        public async approveWithdrawal(id: number): Promise<ApproveWithdrawalResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/outreach/withdrawals/${encodeURIComponent(id)}/approve`)
            return await resp.json() as ApproveWithdrawalResponse
        }

        /**
         * Creates a new outreach guide
         */
        public async createGuide(params: CreateGuideParams): Promise<CreateGuideResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/outreach/guides`, JSON.stringify(params))
            return await resp.json() as CreateGuideResponse
        }

        /**
         * Builds the full downline tree for the authenticated user (all depths).
         */
        public async getDownline(): Promise<GetDownlineResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/outreach/downline`)
            return await resp.json() as GetDownlineResponse
        }

        /**
         * Gets the authenticated user's affiliate profile, if it exists.
         */
        public async getProfile(): Promise<AffiliateProfile> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/outreach/profile`)
            return await resp.json() as AffiliateProfile
        }

        /**
         * Gets affiliate stats for the authenticated user
         */
        public async getStats(): Promise<OutreachStats> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/outreach/stats`)
            return await resp.json() as OutreachStats
        }

        /**
         * Allows a user to join the Soul Outreach affiliate program.
         */
        public async joinProgram(params: JoinProgramParams): Promise<JoinProgramResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/outreach/join`, JSON.stringify(params))
            return await resp.json() as JoinProgramResponse
        }

        /**
         * Lists all outreach guides
         */
        public async listGuides(): Promise<ListGuidesResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/outreach/guides`)
            return await resp.json() as ListGuidesResponse
        }

        /**
         * Lists top affiliates by total earnings (or weekly earnings if equal)
         */
        public async listLeaderboard(params: ListLeaderboardParams): Promise<ListLeaderboardResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit: params.limit === undefined ? undefined : String(params.limit),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/outreach/leaderboard`, undefined, {query})
            return await resp.json() as ListLeaderboardResponse
        }

        /**
         * Lists commission payouts for the authenticated user
         */
        public async listPayouts(): Promise<ListPayoutsResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/outreach/payouts`)
            return await resp.json() as ListPayoutsResponse
        }

        /**
         * Lists all affiliate profiles with direct referral counts and earnings
         */
        public async listProfiles(): Promise<ListProfilesResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/outreach/profiles`)
            return await resp.json() as ListProfilesResponse
        }

        /**
         * Lists all withdrawal requests (most recent first)
         */
        public async listWithdrawals(): Promise<ListWithdrawalsResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/outreach/withdrawals`)
            return await resp.json() as ListWithdrawalsResponse
        }

        /**
         * Seeds a rich demo network for Outreach so the dashboard shows a full MLM structure.
         */
        public async seedNetwork(): Promise<SeedNetworkResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/outreach/seed`)
            return await resp.json() as SeedNetworkResponse
        }
    }
}

export namespace partnership {
    export interface ApplicationStatus {
        hasApplied: boolean
        status?: string | null
        churchName?: string | null
        createdAt?: string | null
    }

    export interface ApplyParams {
        churchName: string
        websiteUrl?: string
        logoUrl?: string
        contactName: string
        contactEmail: string
    }

    export interface ApplyResponse {
        success: boolean
        partnerId: number
    }

    export interface ChurchAudit {
        id: number
        partnerId: number
        partnerName: string
        status: string
        scheduledFor: string
        completedAt?: string | null
        notes?: string | null
    }

    export interface ListAdminResponse {
        applications: PartnerApplication[]
    }

    export interface ListAuditsResponse {
        audits: ChurchAudit[]
    }

    export interface ListResponse {
        partners: Partner[]
    }

    export interface Partner {
        id: number
        name: string
        logoUrl?: string | null
        websiteUrl?: string | null
    }

    export interface PartnerApplication {
        contactName: string
        contactEmail: string
        userId: string
        status: string
        createdAt: string
        id: number
        name: string
        logoUrl?: string | null
        websiteUrl?: string | null
    }

    export interface UpdateAuditStatusParams {
        status: "pending" | "in_progress" | "completed" | "failed"
        notes?: string
    }

    export interface UpdateAuditStatusResponse {
        success: boolean
    }

    export interface UpdateStatusParams {
        status: "approved" | "rejected" | "pending"
    }

    export interface UpdateStatusResponse {
        success: boolean
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.apply = this.apply.bind(this)
            this.getApplicationStatus = this.getApplicationStatus.bind(this)
            this.list = this.list.bind(this)
            this.listAdmin = this.listAdmin.bind(this)
            this.listAudits = this.listAudits.bind(this)
            this.updateAuditStatus = this.updateAuditStatus.bind(this)
            this.updateStatus = this.updateStatus.bind(this)
        }

        /**
         * Allows a user with an active PARTNER subscription to apply for official partnership recognition.
         */
        public async apply(params: ApplyParams): Promise<ApplyResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/partnership/apply`, JSON.stringify(params))
            return await resp.json() as ApplyResponse
        }

        /**
         * Gets the partnership application status for the authenticated user.
         */
        public async getApplicationStatus(): Promise<ApplicationStatus> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/partnership/status`)
            return await resp.json() as ApplicationStatus
        }

        /**
         * Lists all approved church partners.
         */
        public async list(): Promise<ListResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/partnership/partners`)
            return await resp.json() as ListResponse
        }

        /**
         * Lists all partnership applications for admin review.
         */
        public async listAdmin(): Promise<ListAdminResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/admin/partnership/applications`)
            return await resp.json() as ListAdminResponse
        }

        /**
         * Lists all church audits for admin review.
         */
        public async listAudits(): Promise<ListAuditsResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/admin/partnership/audits`)
            return await resp.json() as ListAuditsResponse
        }

        /**
         * Updates the status of a church audit.
         */
        public async updateAuditStatus(id: number, params: UpdateAuditStatusParams): Promise<UpdateAuditStatusResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PUT", `/admin/partnership/audits/${encodeURIComponent(id)}/status`, JSON.stringify(params))
            return await resp.json() as UpdateAuditStatusResponse
        }

        /**
         * Updates the status of a partnership application.
         */
        public async updateStatus(id: number, params: UpdateStatusParams): Promise<UpdateStatusResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PUT", `/admin/partnership/applications/${encodeURIComponent(id)}/status`, JSON.stringify(params))
            return await resp.json() as UpdateStatusResponse
        }
    }
}

export namespace payment {
    export interface CreateCheckoutSessionParams {
        planCode: string
        successUrl: string
        cancelUrl: string
    }

    export interface CreateCheckoutSessionResponse {
        sessionId: string
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createCheckoutSession = this.createCheckoutSession.bind(this)
            this.webhook = this.webhook.bind(this)
        }

        /**
         * Creates a Stripe Checkout session for a subscription.
         */
        public async createCheckoutSession(params: CreateCheckoutSessionParams): Promise<CreateCheckoutSessionResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/payment/checkout`, JSON.stringify(params))
            return await resp.json() as CreateCheckoutSessionResponse
        }

        /**
         * Handles incoming Stripe webhooks.
         */
        public async webhook(method: "POST", body?: RequestInit["body"], options?: CallParameters): Promise<globalThis.Response> {
            return this.baseClient.callAPI(method, `/payment/webhook`, body, options)
        }
    }
}

export namespace staff {
    export interface CreateStaffParams {
        userId?: string
        fullName: string
        email?: string
        mobile?: string
        paid?: boolean
        avatarUrl?: string
        wantsChildrenWork?: boolean
        wantsMinistryTeam?: boolean
    }

    export interface GetComplianceResponse {
        profile: StaffProfile
    }

    export interface GetDocUploadUrlParams {
        docType: "drivers_license_front"
        fileExtension?: string
    }

    export interface GetDocUploadUrlResponse {
        url: string
        objectName: string
    }

    export interface SendFormsResponse {
        success: boolean
        sentAt: string
    }

    export interface StaffProfile {
        id: number
        userId?: string | null
        fullName: string
        email?: string | null
        mobile?: string | null
        paid: boolean
        avatarUrl?: string | null
        driversLicenseFrontUrl?: string | null
        wantsChildrenWork: boolean
        wantsMinistryTeam: boolean
        blueCardNumber?: string | null
        blueCardExpiry?: string | null
        policyAcknowledged: boolean
        backgroundCheckCompleted: boolean
        policeCheckCompleted: boolean
        trainingCompletedManual: boolean
        formsLastSentAt?: string | null
        createdAt: string
        updatedAt: string
        /**
         * Derived compliance
         */
        compliance?: {
            requiresBlueCard: boolean
            hasBlueCard: boolean
            requiresMinistryTraining: boolean
            ministryTrainingCompleted: boolean
            documentsComplete: boolean
            eligible: boolean
        }
    }

    export interface UpdateStaffParams {
        userId?: string | null
        fullName?: string
        email?: string | null
        mobile?: string | null
        paid?: boolean
        avatarUrl?: string | null
        driversLicenseFrontUrl?: string | null
        wantsChildrenWork?: boolean
        wantsMinistryTeam?: boolean
        blueCardNumber?: string | null
        blueCardExpiry?: string | null
        policyAcknowledged?: boolean
        backgroundCheckCompleted?: boolean
        policeCheckCompleted?: boolean
        trainingCompletedManual?: boolean
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createStaff = this.createStaff.bind(this)
            this.getCompliance = this.getCompliance.bind(this)
            this.getDocUploadUrl = this.getDocUploadUrl.bind(this)
            this.listStaff = this.listStaff.bind(this)
            this.sendForms = this.sendForms.bind(this)
            this.updateStaff = this.updateStaff.bind(this)
        }

        public async createStaff(params: CreateStaffParams): Promise<StaffProfile> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/admin/staff`, JSON.stringify(params))
            return await resp.json() as StaffProfile
        }

        /**
         * Returns a single staff profile with derived compliance status.
         */
        public async getCompliance(id: number): Promise<GetComplianceResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/admin/staff/${encodeURIComponent(id)}/compliance`)
            return await resp.json() as GetComplianceResponse
        }

        public async getDocUploadUrl(staffId: number, params: GetDocUploadUrlParams): Promise<GetDocUploadUrlResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/admin/staff/${encodeURIComponent(staffId)}/doc-upload-url`, JSON.stringify(params))
            return await resp.json() as GetDocUploadUrlResponse
        }

        /**
         * Lists all staff/volunteer profiles with derived compliance status.
         */
        public async listStaff(): Promise<{
    /**
     * Lists all staff/volunteer profiles with derived compliance status.
     */
    staff: StaffProfile[]
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/admin/staff`)
            return await resp.json() as {
    /**
     * Lists all staff/volunteer profiles with derived compliance status.
     */
    staff: StaffProfile[]
}
        }

        /**
         * Marks forms as sent; in a real system we'd email or push a dashboard notification.
         */
        public async sendForms(id: number): Promise<SendFormsResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/admin/staff/${encodeURIComponent(id)}/send-forms`)
            return await resp.json() as SendFormsResponse
        }

        public async updateStaff(id: number, params: UpdateStaffParams): Promise<StaffProfile> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PUT", `/admin/staff/${encodeURIComponent(id)}`, JSON.stringify(params))
            return await resp.json() as StaffProfile
        }
    }
}

export namespace user {
    export interface UpdateProfileParams {
        name?: string
        email?: string
        usdtWalletAddress?: string
        bsb?: string
        accountNumber?: string
    }

    export interface UserProfile {
        userId: string
        name?: string | null
        email?: string | null
        usdtWalletAddress?: string | null
        bsb?: string | null
        accountNumber?: string | null
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.getMe = this.getMe.bind(this)
            this.getProfile = this.getProfile.bind(this)
            this.updateProfile = this.updateProfile.bind(this)
        }

        /**
         * Gets the profile for the currently authenticated user.
         */
        public async getMe(): Promise<UserProfile> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/user/me`)
            return await resp.json() as UserProfile
        }

        /**
         * Gets a user's public profile information.
         */
        public async getProfile(userId: string): Promise<UserProfile> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/user/profile/${encodeURIComponent(userId)}`)
            return await resp.json() as UserProfile
        }

        /**
         * Updates the authenticated user's profile information.
         */
        public async updateProfile(params: UpdateProfileParams): Promise<UserProfile> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PUT", `/user/me`, JSON.stringify(params))
            return await resp.json() as UserProfile
        }
    }
}



function encodeQuery(parts: Record<string, string | string[]>): string {
    const pairs: string[] = []
    for (const key in parts) {
        const val = (Array.isArray(parts[key]) ?  parts[key] : [parts[key]]) as string[]
        for (const v of val) {
            pairs.push(`${key}=${encodeURIComponent(v)}`)
        }
    }
    return pairs.join("&")
}

// makeRecord takes a record and strips any undefined values from it,
// and returns the same record with a narrower type.
// @ts-ignore - TS ignore because makeRecord is not always used
function makeRecord<K extends string | number | symbol, V>(record: Record<K, V | undefined>): Record<K, V> {
    for (const key in record) {
        if (record[key] === undefined) {
            delete record[key]
        }
    }
    return record as Record<K, V>
}

function encodeWebSocketHeaders(headers: Record<string, string>) {
    // url safe, no pad
    const base64encoded = btoa(JSON.stringify(headers))
      .replaceAll("=", "")
      .replaceAll("+", "-")
      .replaceAll("/", "_");
    return "encore.dev.headers." + base64encoded;
}

class WebSocketConnection {
    public ws: WebSocket;

    private hasUpdateHandlers: (() => void)[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        let protocols = ["encore-ws"];
        if (headers) {
            protocols.push(encodeWebSocketHeaders(headers))
        }

        this.ws = new WebSocket(url, protocols)

        this.on("error", () => {
            this.resolveHasUpdateHandlers();
        });

        this.on("close", () => {
            this.resolveHasUpdateHandlers();
        });
    }

    resolveHasUpdateHandlers() {
        const handlers = this.hasUpdateHandlers;
        this.hasUpdateHandlers = [];

        for (const handler of handlers) {
            handler()
        }
    }

    async hasUpdate() {
        // await until a new message have been received, or the socket is closed
        await new Promise((resolve) => {
            this.hasUpdateHandlers.push(() => resolve(null))
        });
    }

    on(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.addEventListener(type, handler);
    }

    off(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.removeEventListener(type, handler);
    }

    close() {
        this.ws.close();
    }
}

export class StreamInOut<Request, Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamIn<Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamOut<Request, Response> {
    public socket: WebSocketConnection;
    private responseValue: Promise<Response>;

    constructor(url: string, headers?: Record<string, string>) {
        let responseResolver: (_: any) => void;
        this.responseValue = new Promise((resolve) => responseResolver = resolve);

        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            responseResolver(JSON.parse(event.data))
        });
    }

    async response(): Promise<Response> {
        return this.responseValue;
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }
}
// CallParameters is the type of the parameters to a method call, but require headers to be a Record type
type CallParameters = Omit<RequestInit, "method" | "body" | "headers"> & {
    /** Headers to be sent with the request */
    headers?: Record<string, string>

    /** Query parameters to be sent with the request */
    query?: Record<string, string | string[]>
}

// AuthDataGenerator is a function that returns a new instance of the authentication data required by this API
export type AuthDataGenerator = () =>
  | auth.AuthParams
  | Promise<auth.AuthParams | undefined>
  | undefined;

// A fetcher is the prototype for the inbuilt Fetch function
export type Fetcher = typeof fetch;

const boundFetch = fetch.bind(this);

class BaseClient {
    readonly baseURL: string
    readonly fetcher: Fetcher
    readonly headers: Record<string, string>
    readonly requestInit: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }
    readonly authGenerator?: AuthDataGenerator

    constructor(baseURL: string, options: ClientOptions) {
        this.baseURL = baseURL
        this.headers = {}

        // Add User-Agent header if the script is running in the server
        // because browsers do not allow setting User-Agent headers to requests
        if (!BROWSER) {
            this.headers["User-Agent"] = "supernaturalins-tmi2-Generated-TS-Client (Encore/v1.49.1)";
        }

        this.requestInit = options.requestInit ?? {};

        // Setup what fetch function we'll be using in the base client
        if (options.fetcher !== undefined) {
            this.fetcher = options.fetcher
        } else {
            this.fetcher = boundFetch
        }

        // Setup an authentication data generator using the auth data token option
        if (options.auth !== undefined) {
            const auth = options.auth
            if (typeof auth === "function") {
                this.authGenerator = auth
            } else {
                this.authGenerator = () => auth
            }
        }
    }

    async getAuthData(): Promise<CallParameters | undefined> {
        let authData: auth.AuthParams | undefined;

        // If authorization data generator is present, call it and add the returned data to the request
        if (this.authGenerator) {
            const mayBePromise = this.authGenerator();
            if (mayBePromise instanceof Promise) {
                authData = await mayBePromise;
            } else {
                authData = mayBePromise;
            }
        }

        if (authData) {
            const data: CallParameters = {};

            data.headers = makeRecord<string, string>({
                authorization: authData.authorization,
            });

            return data;
        }

        return undefined;
    }

    // createStreamInOut sets up a stream to a streaming API endpoint.
    async createStreamInOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamInOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamInOut(this.baseURL + path + queryString, headers);
    }

    // createStreamIn sets up a stream to a streaming API endpoint.
    async createStreamIn<Response>(path: string, params?: CallParameters): Promise<StreamIn<Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamIn(this.baseURL + path + queryString, headers);
    }

    // createStreamOut sets up a stream to a streaming API endpoint.
    async createStreamOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamOut(this.baseURL + path + queryString, headers);
    }

    // callTypedAPI makes an API call, defaulting content type to "application/json"
    public async callTypedAPI(method: string, path: string, body?: RequestInit["body"], params?: CallParameters): Promise<Response> {
        return this.callAPI(method, path, body, {
            ...params,
            headers: { "Content-Type": "application/json", ...params?.headers }
        });
    }

    // callAPI is used by each generated API method to actually make the request
    public async callAPI(method: string, path: string, body?: RequestInit["body"], params?: CallParameters): Promise<Response> {
        let { query, headers, ...rest } = params ?? {}
        const init = {
            ...this.requestInit,
            ...rest,
            method,
            body: body ?? null,
        }

        // Merge our headers with any predefined headers
        init.headers = {...this.headers, ...init.headers, ...headers}

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                init.headers = {...init.headers, ...authData.headers};
            }
        }

        // Make the actual request
        const queryString = query ? '?' + encodeQuery(query) : ''
        const response = await this.fetcher(this.baseURL+path+queryString, init)

        // handle any error responses
        if (!response.ok) {
            // try and get the error message from the response body
            let body: APIErrorResponse = { code: ErrCode.Unknown, message: `request failed: status ${response.status}` }

            // if we can get the structured error we should, otherwise give a best effort
            try {
                const text = await response.text()

                try {
                    const jsonBody = JSON.parse(text)
                    if (isAPIErrorResponse(jsonBody)) {
                        body = jsonBody
                    } else {
                        body.message += ": " + JSON.stringify(jsonBody)
                    }
                } catch {
                    body.message += ": " + text
                }
            } catch (e) {
                // otherwise we just append the text to the error message
                body.message += ": " + String(e)
            }

            throw new APIError(response.status, body)
        }

        return response
    }
}

/**
 * APIErrorDetails represents the response from an Encore API in the case of an error
 */
interface APIErrorResponse {
    code: ErrCode
    message: string
    details?: any
}

function isAPIErrorResponse(err: any): err is APIErrorResponse {
    return (
        err !== undefined && err !== null &&
        isErrCode(err.code) &&
        typeof(err.message) === "string" &&
        (err.details === undefined || err.details === null || typeof(err.details) === "object")
    )
}

function isErrCode(code: any): code is ErrCode {
    return code !== undefined && Object.values(ErrCode).includes(code)
}

/**
 * APIError represents a structured error as returned from an Encore application.
 */
export class APIError extends Error {
    /**
     * The HTTP status code associated with the error.
     */
    public readonly status: number

    /**
     * The Encore error code
     */
    public readonly code: ErrCode

    /**
     * The error details
     */
    public readonly details?: any

    constructor(status: number, response: APIErrorResponse) {
        // extending errors causes issues after you construct them, unless you apply the following fixes
        super(response.message);

        // set error name as constructor name, make it not enumerable to keep native Error behavior
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors
        Object.defineProperty(this, 'name', {
            value:        'APIError',
            enumerable:   false,
            configurable: true,
        })

        // fix the prototype chain
        if ((Object as any).setPrototypeOf == undefined) {
            (this as any).__proto__ = APIError.prototype
        } else {
            Object.setPrototypeOf(this, APIError.prototype);
        }

        // capture a stack trace
        if ((Error as any).captureStackTrace !== undefined) {
            (Error as any).captureStackTrace(this, this.constructor);
        }

        this.status = status
        this.code = response.code
        this.details = response.details
    }
}

/**
 * Typeguard allowing use of an APIError's fields'
 */
export function isAPIError(err: any): err is APIError {
    return err instanceof APIError;
}

export enum ErrCode {
    /**
     * OK indicates the operation was successful.
     */
    OK = "ok",

    /**
     * Canceled indicates the operation was canceled (typically by the caller).
     *
     * Encore will generate this error code when cancellation is requested.
     */
    Canceled = "canceled",

    /**
     * Unknown error. An example of where this error may be returned is
     * if a Status value received from another address space belongs to
     * an error-space that is not known in this address space. Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     *
     * Encore will generate this error code in the above two mentioned cases.
     */
    Unknown = "unknown",

    /**
     * InvalidArgument indicates client specified an invalid argument.
     * Note that this differs from FailedPrecondition. It indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     *
     * This error code will not be generated by the gRPC framework.
     */
    InvalidArgument = "invalid_argument",

    /**
     * DeadlineExceeded means operation expired before completion.
     * For operations that change the state of the system, this error may be
     * returned even if the operation has completed successfully. For
     * example, a successful response from a server could have been delayed
     * long enough for the deadline to expire.
     *
     * The gRPC framework will generate this error code when the deadline is
     * exceeded.
     */
    DeadlineExceeded = "deadline_exceeded",

    /**
     * NotFound means some requested entity (e.g., file or directory) was
     * not found.
     *
     * This error code will not be generated by the gRPC framework.
     */
    NotFound = "not_found",

    /**
     * AlreadyExists means an attempt to create an entity failed because one
     * already exists.
     *
     * This error code will not be generated by the gRPC framework.
     */
    AlreadyExists = "already_exists",

    /**
     * PermissionDenied indicates the caller does not have permission to
     * execute the specified operation. It must not be used for rejections
     * caused by exhausting some resource (use ResourceExhausted
     * instead for those errors). It must not be
     * used if the caller cannot be identified (use Unauthenticated
     * instead for those errors).
     *
     * This error code will not be generated by the gRPC core framework,
     * but expect authentication middleware to use it.
     */
    PermissionDenied = "permission_denied",

    /**
     * ResourceExhausted indicates some resource has been exhausted, perhaps
     * a per-user quota, or perhaps the entire file system is out of space.
     *
     * This error code will be generated by the gRPC framework in
     * out-of-memory and server overload situations, or when a message is
     * larger than the configured maximum size.
     */
    ResourceExhausted = "resource_exhausted",

    /**
     * FailedPrecondition indicates operation was rejected because the
     * system is not in a state required for the operation's execution.
     * For example, directory to be deleted may be non-empty, an rmdir
     * operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FailedPrecondition, Aborted, and Unavailable:
     *  (a) Use Unavailable if the client can retry just the failing call.
     *  (b) Use Aborted if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FailedPrecondition if the client should not retry until
     *      the system state has been explicitly fixed. E.g., if an "rmdir"
     *      fails because the directory is non-empty, FailedPrecondition
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FailedPrecondition if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     *
     * This error code will not be generated by the gRPC framework.
     */
    FailedPrecondition = "failed_precondition",

    /**
     * Aborted indicates the operation was aborted, typically due to a
     * concurrency issue like sequencer check failures, transaction aborts,
     * etc.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     */
    Aborted = "aborted",

    /**
     * OutOfRange means operation was attempted past the valid range.
     * E.g., seeking or reading past end of file.
     *
     * Unlike InvalidArgument, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate InvalidArgument if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OutOfRange if asked to read from an offset past the current
     * file size.
     *
     * There is a fair bit of overlap between FailedPrecondition and
     * OutOfRange. We recommend using OutOfRange (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OutOfRange error to detect when
     * they are done.
     *
     * This error code will not be generated by the gRPC framework.
     */
    OutOfRange = "out_of_range",

    /**
     * Unimplemented indicates operation is not implemented or not
     * supported/enabled in this service.
     *
     * This error code will be generated by the gRPC framework. Most
     * commonly, you will see this error code when a method implementation
     * is missing on the server. It can also be generated for unknown
     * compression algorithms or a disagreement as to whether an RPC should
     * be streaming.
     */
    Unimplemented = "unimplemented",

    /**
     * Internal errors. Means some invariants expected by underlying
     * system has been broken. If you see one of these errors,
     * something is very broken.
     *
     * This error code will be generated by the gRPC framework in several
     * internal error conditions.
     */
    Internal = "internal",

    /**
     * Unavailable indicates the service is currently unavailable.
     * This is a most likely a transient condition and may be corrected
     * by retrying with a backoff. Note that it is not always safe to retry
     * non-idempotent operations.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     *
     * This error code will be generated by the gRPC framework during
     * abrupt shutdown of a server process or network connection.
     */
    Unavailable = "unavailable",

    /**
     * DataLoss indicates unrecoverable data loss or corruption.
     *
     * This error code will not be generated by the gRPC framework.
     */
    DataLoss = "data_loss",

    /**
     * Unauthenticated indicates the request does not have valid
     * authentication credentials for the operation.
     *
     * The gRPC framework will generate this error code when the
     * authentication metadata is invalid or a Credentials callback fails,
     * but also expect authentication middleware to generate it.
     */
    Unauthenticated = "unauthenticated",
}
