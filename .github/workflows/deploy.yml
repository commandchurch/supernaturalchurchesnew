name: Deploy to Production

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]

jobs:
  deploy-backend:
    name: Deploy Convex Backend
    runs-on: ubuntu-latest
    env:
      CONVEX_DEPLOY_KEY: ${{ secrets.CONVEX_DEPLOY_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Install Convex CLI
        run: npm install -g convex

      - name: Deploy to Convex (skip if no prod key)
        run: |
          if [ -z "${CONVEX_DEPLOY_KEY}" ]; then
            echo "No CONVEX_DEPLOY_KEY provided. Skipping backend deploy."
            exit 0
          fi
          if ! echo "${CONVEX_DEPLOY_KEY}" | grep -q "^prod:"; then
            echo "CONVEX_DEPLOY_KEY is not a prod key. Skipping backend deploy."
            exit 0
          fi
          npx convex deploy --yes

  deploy-frontend:
    name: Deploy Vercel Frontend
    runs-on: ubuntu-latest
    # Frontend can deploy independently of backend
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        working-directory: ./frontend
        run: bun install

      - name: Build frontend
        working-directory: ./frontend
        run: bun run build

      - name: Deploy to Vercel
        working-directory: ./frontend
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          npm install -g vercel
          vercel pull --yes --environment=production --token=$VERCEL_TOKEN
          # Build within frontend/ where vercel.json exists
          vercel build --prod --token=$VERCEL_TOKEN
          vercel deploy --prebuilt --prod --token=$VERCEL_TOKEN

      - name: Ensure domain points to latest production (best-effort)
        working-directory: ./frontend
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          npm install -g vercel
          # Best-effort alias; will be a no-op if already mapped or lacking permission
          if [ -z "$VERCEL_TOKEN" ]; then
            echo "No VERCEL_TOKEN provided. Skipping domain check."
            exit 0
          fi
          vercel alias ls --token=$VERCEL_TOKEN | grep -q "supernatural.institute" && echo "Domain already mapped" || echo "Domain mapping will be handled in Vercel dashboard"

  test-deployment:
    name: Test Deployment
    runs-on: ubuntu-latest
    needs: [deploy-frontend]
    if: github.event_name == 'push' && always()
    steps:
      - name: Health Check
        run: |
          echo "âœ… Backend deployed to Convex"
          echo "âœ… Frontend deployed to Vercel"
          echo "ðŸš€ Deployment pipeline completed successfully!"
