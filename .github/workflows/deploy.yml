name: Deploy to Production

on:
  push:
    branches: [master, main]

jobs:
  deploy-backend:
    name: Deploy Encore Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Encore CLI
        run: |
          curl -L https://encore.dev/install.sh | bash
          echo "$HOME/.encore/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: npm install

      - name: Build Encore backend
        run: encore build

      - name: Deploy to Encore Cloud
        env:
          ENCORE_TOKEN: ${{ secrets.ENCORE_TOKEN }}
        run: |
          if [ -z "$ENCORE_TOKEN" ]; then
            echo "No ENCORE_TOKEN provided. Skipping backend deploy."
            exit 0
          fi
          encore auth login --token=$ENCORE_TOKEN
          git remote add encore encore://supernaturalins-tmi2 || echo "Remote already exists"
          git add -A .
          git commit -m "Deploy to Encore Cloud" || echo "No changes to commit"
          git push encore

  deploy-frontend:
    name: Deploy Vercel Frontend
    runs-on: ubuntu-latest
    needs: deploy-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        working-directory: ./frontend
        run: bun install

      - name: Build frontend
        working-directory: ./frontend
        run: bun run build

      - name: Deploy to Vercel
        working-directory: ./frontend
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          npm install -g vercel
          vercel pull --yes --environment=production --token=$VERCEL_TOKEN
          vercel build --prod --token=$VERCEL_TOKEN
          vercel deploy --prod --token=$VERCEL_TOKEN
